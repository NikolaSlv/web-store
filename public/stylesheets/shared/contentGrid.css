/* Based on the fluid grid concept */

/* Container */
.fluid {
    display: grid;
    /* Define the element as a grid container */

    grid-template-columns: repeat(auto-fit, minmax(210px, 1fr));
    /* Auto-fit as many items on a row as possible without an item going under 180px wide */
    /* 1fr value makes the columns equal fractions of the available width */

    grid-gap: 1rem;
    /* A little spacing between items */

    grid-auto-flow: dense;
    /* Fill the gaps when having columns with different widths */
}

/* Item */
.item {
    padding: 1rem;
    background: var(--form-input-background-color);
    box-shadow:
      0 5px 10px rgba(0, 0, 0, 0.1),
      0 20px 20px rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: .2rem;
    /* Box design */

    grid-column: span 3, autofit;
    /* Prioritize responsiveness over our span requests */

    grid-column: auto, -1;
    /* 
       An issue with responsive grids is the last row. 
       As the screen width changes the last row will frequently not be filled.
       This line makes the left-hand edge span to the end of the row.
    */

    font-size: var(--basic-text-size-1200px);
    /* Font */
}

/* No box */
.no-box {
    padding: 0;
    background: none;
    box-shadow: none;
    border: none;
}

/* Extra-wide grid items (span over multiple columns)
   or fix an item's position */
.item-content-page:nth-child(4) {
    grid-column: 1 / 3;
}
/* 
Specifying (xn + k) would mean it applies to children: x*0 + k, x*1 + k, x*2 + k and so on...
! In this case we count from 1, so k >= 1

Grid-column essentials:

Usage:
grid-column: (start track) / (end track);

The numbering system for grid lines is as follows:
 1      2      3      4      5
-5     -4     -3     -2     -1
 | item | item | item | item |
 | item | item | item | item |
 | item | item | item | item |

We must guarantee at least 2 columns in order to efficiently use grid-column.
Thus, we can use values 1 to 3 and -3 to -1.
The interesting thing is that we can combine, for example: 
1 / -1 and achieve a full-width column
2 / -1 and achieve a grid that spans over n-1 columns on a n-column wide grid

Although there are limitations, this approach is very efficient
and are a lot of different possibilites for the column layout.
*/

/* DYNAMICS */

@media only screen and (max-width: 992px) {
    .item {
        font-size: var(--basic-text-size-992px);
    }
}
@media only screen and (max-width: 768px) {
    .item {
        font-size: var(--basic-text-size-768px);
    }
}
/* Adapt single column display for phones using flex */
@media only screen and (max-width: 576px) {
    .fluid {
        display: flex;
        flex-direction: column;
    }
    .item {
        font-size: var(--basic-text-size-576px);
    }
}